#+title: Logic
#+author: Erik An
#+email: obluda2173@gmail.com
#+date: <2025-10-07>
#+lastmod: <2025-10-08 12:59>
#+options: num:t
#+startup: overview

* 2.1 Statements
  - Statement :: is a sentence or a mathematical expression that is either definitely true or definitely false.
    - Statements are either correct or incorrect.
    - Statements are pieces of information that mathematicians apply logic to to produce pieces of information.

    - Example 2.1
      - If a circle has radius r, then its area is Pi * r^2
      - 2 ∈ N
      - 2^(1/2) ∉ N

  In mathematics, statements are often represented as letters P, Q, R, S to stand for specific statements.
   - P: For every integer n > 1, the number 2^n - 1 is prime
   - Q: Every polynomial of degree n has at most n roots
   - R: The function f(x) = x^2 is continuous

   Some statements can contain variables:
   - P: If an integer x is a multiple of 6, then x is even.

   When sentences or statements contain a variable such as x, mathematicians sometimes denote it as P(x) to indicate that it is saying about x.
   - P(x): If an integer x is a multiple of 6, then x is even.

   A statement containing 2 or more variables can be written like: P(x, y)

   An example like this:
   - Q(x): The integer x is even.

   is not a statement since it can be true or false depending on the value of x. Therefore, since it cannot definitely be said that Q(x) is either definitely true or definitely false, we conclude that it is not a statement but rather an =open sentence=.

   - Open sentence :: is a "statement" which is either true or false depending on the value of the variable it operates with.

* 2.2 And, Or, Not
- *AND* - =∧=
|-----+-----+---------|
| *P* | *Q* | *P ∧ Q* |
|-----+-----+---------|
| T   | T   | T       |
| T   | F   | F       |
| F   | T   | F       |
| F   | F   | F       |
|-----+-----+---------|
- *OR* - =∨=
|-----+-----+---------|
| *P* | *Q* | *P ∨ Q* |
|-----+-----+---------|
| T   | T   | T       |
| T   | F   | T       |
| F   | T   | T       |
| F   | F   | F       |
|-----+-----+---------|
- *NOT* - =¬=
|-----+------|
| *P* | *¬P* |
|-----+------|
| T   | F    |
| T   | F    |
| F   | T    |
| F   | T    |
|-----+------|
* 2.3 Conditional Statements
Except of AND and OR, there is another way to combine two statements.

- R: If the integer a is a multiple of 6, then a is a divisible by 2.

We can clearly see the pattern of `if ... then`. Notice that R is build up from two simpler statements:
- P: The integer a is a multiple of 6.
- Q: The integer a is divisible by 2.
- if P, then Q.

In general given any two statements P and Q whatsoever, we can form the new statement "If P then Q." This is written symbolically as P => Q, which we read as "If P, then Q." or "P implies Q."

The above statement is called =conditional statement=, because it means that Q will only be true under the condition that P is true.

|-----+-----+----------|
| *P* | *Q* | *P => Q* |
|-----+-----+----------|
| T   | T   | T        |
| T   | F   | F        |
| F   | T   | T        |
| F   | F   | T        |
|-----+-----+----------|

* 2.4 Biconditional Statements
It is important to understand that =P => Q= is not the same as =Q => P=.

But sometimes, if P and Q are just the right statements, it can happen that P => Q and Q => P are true, it follows that (P => Q) ∧ (Q => P) is true.

So here we are introduced to a new mathematical symbol =<=>=, which is bassically (P => Q) ∧ (Q => P). According to the previous section, Q => P is being read as "P if Q", and P => Q can be read as "P only if Q". Therefore, we pronounce P <=> Q as "P if and only if Q".

- (a is even) <=> (a is divisible by 2)
(which is read like: "The integer a is even if and only if a is divisible by 2")

- *P <=> Q*
|-----+-----+-----------|
| *P* | *Q* | *P <=> Q* |
|-----+-----+-----------|
| T   | T   | T         |
| T   | F   | F         |
| F   | T   | F         |
| F   | F   | T         |
|-----+-----+-----------|
* 2.5 Truth Tablels for Statements
So since now I am familiar with the ∧, ∨, ¬, => and <=>, its time to combine them all in a statements.

(P ∨ Q) ∧ ¬(P ∧ Q)
(this means "P or Q is true, and it is not the case that both P and Q are true.")

- =(P ∨ Q) ∧ ¬(P ∧ Q)=
|-----+-----+-----------+-----------+------------+----------------------|
| *P* | *Q* | *(P ∨ Q)* | *(P ∧ Q)* | *¬(P ∧ Q)* | *(P ∨ Q) ∧ ¬(P ∧ Q)* |
|-----+-----+-----------+-----------+------------+----------------------|
| T   | T   | T         | T         | F          | F                    |
| T   | F   | T         | F         | T          | T                    |
| F   | T   | T         | F         | T          | T                    |
| F   | F   | F         | F         | T          | F                    |
|-----+-----+-----------+-----------+------------+----------------------|

- =P <=> (Q ∨ R)=
|-----+-----+-----+-----------+-----------------|
| *P* | *Q* | *R* | *(Q ∨ R)* | *P <=> (Q ∧ R)* |
|-----+-----+-----+-----------+-----------------|
| T   | T   | T   | T         | T               |
| T   | T   | F   | T         | T               |
| T   | F   | T   | T         | T               |
| T   | F   | F   | F         | F               |
| F   | T   | T   | T         | F               |
| F   | T   | F   | T         | F               |
| F   | F   | T   | T         | F               |
| F   | F   | F   | F         | T               |
|-----+-----+-----+-----------+-----------------|

* 2.6 Logical Equivalence
=P <=> Q= is equivalent to =(P ∧ Q) ∨ (¬P ∧ ¬Q)=

In general, if the truth tables of the statements match up, it can be said that they are logically equivalent.

Two pairs of logically equivalent statements in particular are significant wnough to have a special name: *DeMorgan's Law*

#+begin_quote
Fact: (DeMorgan Laws)
1. ¬(P ∧ Q) = (¬P) ∨ (¬Q)
2. ¬(P ∨ Q) = (¬P) ∧ (¬Q)
#+end_quote

Other Laws:

#+begin_quote
Contrapositive Law
- P => Q = (¬P) => (¬Q)
#+end_quote

#+begin_quote
Commutative Laws
- P ∧ Q = Q ∧ P
- P ∨ Q = Q ∨ P
#+end_quote

#+begin_quote
Distributive Laws
- P ∧ (Q ∨ R) = (P ∧ Q) ∨ (P ∧ R)
- P ∨ (Q ∧ R) = (P ∨ Q) ∧ (P ∨ R)
#+end_quote

#+begin_quote
Associative Laws
- P ∧ (Q ∨ R) = (P ∧ Q) ∨ R
- P ∨ (Q ∧ R) = (P ∨ Q) ∧ R
#+end_quote

* 2.7 Quantifiers
- ∃ :: "There exists a ..." or "There is a ..."
- ∀ :: "For all ..." or "For every ..."

A more formal names of these quantifiers are:
- ∃ :: Existencial quantifier
- ∀ :: Universal quantifier

Examples:
- Every integer that is not add is even
  ∀ x ∈ Z, ¬(x is odd) => (x is even)
- There exists an integer that is not even
  ∃ x ∈ Z, ¬E(x)

* 2.8 More on Conditional Statements
Just dont't mess up the order of the statement as it can be true for one direction, while false for the other.

* 2.9 Translating English to Symbolic Logic
Practice of translating english sentences into symbolic form:

- Example 1
  If f is continious on the interval [a, b] and differentiable on (a, b), then there is a number c ∈ (a, b) for which f'(c) = (f(b) - f(a)) / (b - a)

  ((f cont. on [a, b]) ∧ (f is diff. on (a, b))) => (∃ c ∈ (a, b), f'(c) = (f(b) - f(a)) / (b - a))

* 2.10 Negating Statements
S: For every real number x, there is a real number y for which y^3 = x

Symbolically:
∀ x ∈ R, ∃ y ∈ R, y^3 = x

Now its time for the negation:
¬(∀ x ∈ R, ∃ y ∈ R, y^3 = x) = ∃ x ∈ R, ¬(∃ y ∈ R, y^3 = x)
                             = ∃ x ∈ R, ∀ y ∈ R, ¬(y^3 = x)
                             = ∃ x ∈ R, ∀ y ∈ R, y^3 != x

- =¬(P => Q) = P ∧ ¬Q=

- Example 1:
  R: If a is odd, then a^2 is odd.
  ¬R: a is odd and a^2 is not odd.

- Example 2:
  R: If x is odd, then x^2 is odd.
  ¬R: ∀ x ∈ R, (x odd) => (x^2 odd).

* 2.11 Logical Inference
- Logical Inference :: is the process of drawing a conlusion from one or more premises using logical operators.

Just use logic, nothing more about this subtopic.
