#+title: Code Assist
#+author: Erik An
#+email: obluda2173@gmail.com
#+date: <2025-10-02>
#+lastmod: <2025-10-02 10:25>
#+options: num:t
#+startup: overview

*** Assist me with the following code. I want to bring it to a full end. By that I mean to push some Circles and Rectangles to shapes variable and then perform total_area function on it.
#+begin_src julia
abstract type Shape end

struct Circle <: Shape
    radius::Float64
end

struct Rectangle <: Shape
    height::Float64
    width::Float64
end

area(s::Circle) = Pi * s.radius^2
area(s::Rectangle) = s.height * s.width

function total_area(shapes::Vector{Shape})
    sum(area(s) for s in shapes)
end

shapes::Vector{Shape}

shapes!.push()
#+end_src

You're on the right track. You will need to instantiate some Circle and Rectangle objects and push them to your =shapes= variable. Here is a full revision of your code:
#+begin_src julia
abstract type Shape end

struct Circle <: Shape
    radius::Float64
end

struct Rectangle <: Shape
    height::Float64
    width::Float64
end

area(s::Circle) = Ï€ * s.radius^2
area(s::Rectangle) = s.height * s.width

function total_area(shapes::Vector{Shape})
    sum(area(s) for s in shapes)
end

# Actual usage
shapes = Vector{Shape}()

push!(shapes, Circle(5.0))
push!(shapes, Rectangle(3.0, 4.0))

println(total_area(shapes))
#+end_src
This code creates a Circle with radius =5.0= and a Rectangle with =height= =3.0= and =width= =4.0=, then it pushes these objects into the =shapes= vector. =total_area= is called on =shapes= and the result is printed.
