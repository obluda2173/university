#+title: Concepts
#+author: Erik An
#+email: obluda2173@gmail.com
#+date: <2025-10-01>
#+lastmod: <2025-10-02 10:51>
#+options: num:t
#+startup: overview

* Terminology
- Multiple Dispatch :: this is a key feature of Julia that allows the functions to behave differently based on the type of the variable provided.
- Metaprogramming :: this is the concept where Julia code treats other Julia code as data. It allows to programmatically generate, modify, analyse or evaluate the code.
- Native Parallel Computing :: this means that Julia can execute some operations concurrently using multiple cores or processors, which boosts the performance of the programm.

* Q&A
** What is a Julia?
- Julia is a high level language with jigh performace which is used for technical computing. It is basically blend of the ease of Python and R with the speed of the C++, making it a valuable instrument for the scientists, engineers and data analysts. The fields where Julia is mostly used in are:

  - Machine learning
  - Data mining
  - Large scale linear algebra
  - Distributed and parallel computing

** What are Julia's primary features?
- Ease of use
- Speed (close to CPP)
- Interoperability (which allows to call C, Fortan and Python functions directly in Julia)
- Rich ecosystem

** What is the `Abstract Types` Julia?
- In Julia `Abstract Types` are non istantiatable. This means that it is not possible to create an object with an abstract type. Instead, they serve primarly as nodes in the type hierarchy, categorising specific subtypes.

  In Julia's type system, all concrete types are subtyped of some abstract type, and all types are subtypes of type =Any=. This is the hierarchical structure similar to a tree.

  #+begin_src julia
  1. AbstractNumber
     - Real (AbstractFloat, Complex)
       - Float64, Float32, ComplexF64, ComplexF32
     - Integer (Integer, Rational)
       - Int8, UInt8, Int16, UInt16, Int32, UInt32, Int64, UInt64, Int128, UInt128
       - Rational64
  #+end_src

  Abstract types can be declared using the =abstract type= keywoard.

  #+begin_src julia
  abstract type Animal end
  #+end_src

 You can also create a hierarchy by defining subtypes:

  #+begin_src julia
  abstract type Bird <: Animal end

  abstract type Mammal <: Animal end
  #+end_src

** What is a metaprogramming really?
-

* Interesting notes
- For some reason when the integer is being devided by `/` it changes its type from int64 to float64
- Apparantly you can also set the size of the integers in Julia
- Apparantly Abstract types are only for organisation purposes
